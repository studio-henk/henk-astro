---
import { getLangFromUrl } from "../i18n/utils";
const lang = getLangFromUrl(Astro.url);
import TheFooter from "../components/TheFooter.astro";
import TheHeaderMobile from "../components/TheHeaderMobile.astro";
import TheHeaderDesktop from "../components/TheHeaderDesktop.astro";

const { title, mainID, mainClass, pageClass, NavFont = "new", NavTheme, NavOnHero } = Astro.props;
---

<html lang={lang} class={pageClass}>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, viewport-fit=cover"
    />
    <meta
      name="description"
      content="Studio HENK is an Amsterdam-based interior design company, founded by two brothers from the Netherlands. We design and produce stunning furniture."
    />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <!-- old font -->
     <link rel="stylesheet" href="https://use.typekit.net/kzt0jvy.css" />
    <!-- henk styles -->
    <link
      href="/static/std/assets/toolkit/styles/toolkit.css"
      media="screen"
      rel="stylesheet"
      type="text/css"
    />
    <slot name="head-styles" />
    <script is:inline src="/static/std/assets/toolkit/scripts/libs.js"></script>
    <!--<script is:inline type="module">
      import { NavBarDesktop } from "/static/std/assets/toolkit/scripts/components/_navigation-desktop.js";
      // Create the query list.
      const mediaQueryList = window.matchMedia("(min-width: 1280px)");

      // Define a callback function for the event listener.
      function handleWindowResizeChange(mql) {
        console.log("hello");
        if (mql.matches) {
          /* The viewport is currently 1280 or larger */
          console.log("The viewport is currently 1280 or larger");
          // load and run desktop scripts
          NavBarDesktop.init();
        }
      }

      // Run the orientation change handler once.
      handleWindowResizeChange(mediaQueryList);

      // Add the callback function as a listener to the query list.
      mediaQueryList.addEventListener("change", handleWindowResizeChange);
    </script>-->
    <!--<script defer src="/static/std/assets/toolkit/scripts/heightForHeroes.js"></script>-->
    <slot name="head-scripts" />
  </head>
  <body>
    <div class="wrapper" data-scroller>
      <TheHeaderMobile NavFont={NavFont} />
      <TheHeaderDesktop NavFont={NavFont} NavTheme={NavTheme} NavOnHero={NavOnHero} />
      <main class={mainClass} id={mainID}>
        <slot />
      </main>
      <TheFooter />
    </div>
    <slot name="footer-scripts" />
    <!--<script is:inline defer>
      const header = document.querySelector("[data-header]");
      const sections = [...document.querySelectorAll("[data-section]")];
      const scrollRoot = document.querySelector("[data-scroller]");

      const options = {
        // root: scrollRoot,
        rootMargin: `${header.offsetHeight * -1}px`,
        // threshold: 0
        // rootMargin: "0px",
        // rootMargin: "-120px",
        threshold: 0
      };

      let direction = "up";
      let prevYPosition = 0;

      const setScrollDirection = () => {
        if (scrollRoot.scrollTop > prevYPosition) {
          direction = "down";
        } else {
          direction = "up";
        }

        prevYPosition = scrollRoot.scrollTop;
      };

      const updateColors = (target) => {
        const theme = target.dataset.section;
        header.setAttribute("data-theme", theme);
      };

      const getTargetSection = (target) => {
        if (direction === "up") return target;

        if (target.nextElementSibling) {
          return target.nextElementSibling;
        } else {
          return target;
        }
      };

      const shouldUpdate = (entry) => {
        if (direction === "down" && !entry.isIntersecting) {
          return true;
        }

        if (direction === "up" && entry.isIntersecting) {
          return true;
        }

        return false;
      };

      /* The callback that will fire on intersection */
      const onIntersect = (entries) => {
        entries.forEach((entry) => {
          setScrollDirection();

          /* Do nothing if no need to update */
          if (!shouldUpdate(entry)) return;

          const target = getTargetSection(entry.target);
          updateColors(target);
          // updateColors(entry.target);
          // const theme = entry.target.dataset.section;
          // header.setAttribute("data-theme", theme);
        });
      };

      /* Create the observer */
      const observer = new IntersectionObserver(onIntersect, options);

      /* Set our observer to observe each section */
      sections.forEach((section) => {
        observer.observe(section);
      });
    </script>-->
  </body>
</html>