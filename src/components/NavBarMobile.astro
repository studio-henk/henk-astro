---
import { getLangFromUrl } from "../i18n/utils";
// import LangSwitchNoScript from "./LangSwitchNoScript.astro";
const lang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname.substring(4);
let otherLang;
if (lang == "nl") {
  otherLang = "en";
} else {
  otherLang = "nl";
}
let otherURL = "/" + otherLang + "/" + currentPath;

import primaryNav from "../../public/data/navigation_data.json";
import Icon from "./astro/Icon.astro";
import AtomLogo from "./Atoms/AtomLogo.astro";
// Convert the object to a JSON string
const primaryNavJSON = JSON.stringify(primaryNav);

const { hasHero } = Astro.props;
let { Theme } = Astro.props;
if (!Theme) {
  Theme = "light";
}
let { showMsgBar } = Astro.props;

const ariaProperties = {
  "data-menu-item-id": "some-id",
  "aria-haspopup": "somepopup",
  ...(hasHero && { "data-has-hero": "true" }),
};
---

<div
  id="NavBarMobile"
  class="NavBarMobile"
  data-theme={Theme}
  data-show-topmessagebar={showMsgBar}
  data-primary-nav={primaryNavJSON}
>
  <header
    {...ariaProperties}
    class="masthead masthead-mobile NavBarMobile__header"
    :class="{ 'NavBar--isScrolled': isScrolled, 'NavBar--isOpen': isNavVisible }"
    id="masthead-mobile"
    data-theme={Theme}
    data-show-topmessagebar={showMsgBar}
  >
    <!--v-cloak-->
    <div class="NavBarMobile__top" ref="NavBarMobile__top">
      <AtomLogo
          url="/"
          icon="logo-henk-solo"
          width="140"
          height="32"
      />
      <!-- cart icon/button -->
      <a
          href="/en/cart/list"
          class="NavBarMobile__top-link"
      >
        <!-- icon cart here -->
        <Icon class="sh-atom-icon" width="24" height="24" name="icon-cart"/>
        Cart
      </a>
      <!-- hamburger button -->
      <hamburger-button @click="toggleNav"></hamburger-button>
    </div>
    <nav
        :class="{ 'mobile-nav': true, 'active': isNavVisible }"
        class="NavBarMobile__nav"
    >
      <button
      v-if="currentLevel > 1"
      @click="navigateToPreviousLevel"
      class="sh-atom-button NavBarMobile__button NavBarMobile__button-back"
      :class="{ reverse: isGoingBack }"
      data-style="plain"
    >
      <!-- arrow back -->
      <Icon
        class="sh-atom-icon NavBarMobile__icon-back"
        width="16"
        height="16"
        name="icon-arrow-left-nav-back"
      />
      Back
    </button>
    <ol class="NavBarMobile__list" :key="currentLevel">
      <li
        v-for="(item, index) in (currentLevel === 1 ? navigationData : currentItems)"
        :key="item.title"
        class="NavBarMobile__list-item"
        :style="{ 'animation-delay': index * 0.15 + 's', opacity: 0 }"
      >
        <span
          v-if="item.childrenData"
          class="NavBarMobile__button NavBarMobile__button-next-level"
          @click="handleMobileNavItemClick(item)"
        >
          [[ item.navTitle ]]
          <Icon
            class="sh-atom-icon"
            width="16"
            height="16"
            name="icon-arrow-right-nav-next"
          />
        </span>
        <a v-else :href="item.url" class="page-link"> [[ item.navTitle ]]</a>
      </li>
      <li
          class="NavBarMobile__list-item"
          v-if="currentLevel === 1"
      >
        <a
            href="/en/cart/list"
            class="page-link"
        >
          <!-- icon cart here -->
          <Icon class="sh-atom-icon" width="24" height="24" name="icon-cart"/>
          Cart
        </a>
      </li>
    </ol>
    </nav>
  </header>
</div>
<div id="pixel-to-watch-mobile"></div>
<script is:inline>
  const { createApp } = Vue;
  const NavBarMobileApp = createApp({
    delimiters: ["[[", "]]"],
    components: {

    },
    data() {
      return {
        isNavVisible: false,
        isLoading: true,
        stack: [],
        showSubmenu: false,
        submenuHeading: "",
        statusNavBarHovered: false,
        isScrolled: false,
        currentLevel: 1,
        currentItems: [],
        isGoingBack: false,
        navigationData: null,
      };
    },
    methods: {
      getNavData() {
        // Access the element with the ID 'NavBar' and retrieve the 'data-primary-nav' attribute
        const primaryNavAttribute = document
          .getElementById("NavBarMobile")
          .getAttribute("data-primary-nav");

        // Set the navigationData property based on the retrieved attribute
        this.navigationData = JSON.parse(primaryNavAttribute).navigationData;
        this.isLoading = false;
      },
      toggleNav() {
        this.isNavVisible = !this.isNavVisible;
        if (this.isNavVisible) {
          this.preventBodyScroll();
        } else {
          this.allowBodyScroll();
          this.resetNav();
        }
      },
      /*toggleNav() {
        if (this.isNavVisible) {
          this.preventBodyScroll();
          // If the menu is currently visible, reset the navigation state
          this.resetNav();
        } else {
          this.allowBodyScroll();
          // If the menu is not visible, toggle its visibility
          this.isNavVisible = !this.isNavVisible;
        }
      },*/
      setBodyPadding() {
        // Calculate the height of the NavBar
        const navBarHeightMobile = this.$refs.NavBarMobile__top.clientHeight;

        // Set padding-top for the body element
        // only if page has no hero
        const hasHeroAttribute = document
          .getElementById("masthead-mobile")
          .getAttribute("data-has-hero");
        // console.log(hasHeroAttribute);
        if (!hasHeroAttribute) {
          // Update CSS variable dynamically
          document.documentElement.style.setProperty('--paddingTopMobile', navBarHeightMobile + 'px');
        }
        document.documentElement.style.setProperty('--navBarHeightMobile', navBarHeightMobile + 'px');
      },
      preventBodyScroll() {
        document.body.style.position = "fixed";
      },
      allowBodyScroll() {
        document.body.style.removeProperty("position");
      },
      handleIntersection(entries) {
        this.isScrolled = entries[0].boundingClientRect.y < 0;
      },
      handleMobileNavItemClick(item) {
        if (item.childrenData) {
          // If there are children, navigate to the next level
          this.currentLevel += 1;
          this.stack.push(this.currentItems);
          this.currentItems = item.childrenData;
        } else {
          // If there are no children, handle the click based on your requirements
          // For example, you can navigate to a specific page or perform other actions
        }
      },
      navigateToNextLevel(item) {
        this.currentLevel += 1;
        this.stack.push(this.currentItems);
        this.currentItems = item.childrenData || [item];
      },
      navigateToPreviousLevel() {
        if (this.currentLevel > 1) {
          this.currentLevel -= 1;
          this.currentItems = this.stack.pop() || [];
        }
      },
      resetNav() {
        // Reset the navigation state to level 1
        this.isNavVisible = false;

        // Reset other relevant data properties to their initial state
        this.currentLevel = 1;
        this.currentItems = [];
        this.stack = [];
        this.isGoingBack = false;
      },
    },
    created() {
      this.getNavData();
    },
    mounted() {
      // Set the navigationData property based on the retrieved attribute
      // this.navigationData = JSON.parse(primaryNavAttribute).navigationData;*/
      this.$nextTick(() => {
        this.setBodyPadding();
      });

      // Create an IntersectionObserver
      const mastheadMobile = document.querySelector(".masthead-mobile");
      const pixelToWatch = document.querySelector("#pixel-to-watch-mobile");

      if (pixelToWatch) {
        const observer = new IntersectionObserver(this.handleIntersection);
        observer.observe(pixelToWatch);
      }
    },
  });

  NavBarMobileApp.config.isCustomElement = tag => tag.startsWith('hamburger-');

  NavBarMobileApp.mount('#NavBarMobile');
</script>
<style is:global>
  @keyframes MoveLeftRight {
    from {
      transform: translateX(-100%);
    }
    to {
      transform: translateX(0);
    }
  }

  @keyframes MoveRightLeft {
    from {
      transform: translateX(100%);
    }
    to {
      transform: translateX(0);
    }
  }

  .NavBarMobile .NavBarMobile__top {
    position: fixed;
    top: 0;
    z-index: 999;
    width: 100%;
    background-color: var(--color-white);
    padding: 24px;
    display: grid;
    align-items: center;
    gap: 8px;
    grid-template-columns: 1fr 24px 24px;
    transition: all .3s ease;
  }

  .NavBarMobile .NavBarMobile__top hamburger-button {
    justify-self: center;
  }

  .NavBarMobile[data-theme="dark"] .NavBarMobile__top {
    background-color: var(--color-transparent);
    color: var(--color-white);
    --color-background-button-nav-mobile: var(--color-white);
  }

  .NavBarMobile[data-theme="dark"] .NavBarMobile__top-link {
    color: var(--color-white);
  }

  .NavBarMobile__top-link {
    font-size: 0;
  }

  .NavBarMobile .NavBarMobile__header.NavBar--isOpen .NavBarMobile__top,
  .NavBarMobile .NavBarMobile__header.NavBar--isScrolled .NavBarMobile__top,
  .NavBarMobile .NavBarMobile__header.NavBar--isScrolled .NavBarMobile__top-link,
  .NavBarMobile .NavBarMobile__header.NavBar--isOpen .NavBarMobile__top-link {
    background-color: var(--color-accent1);
    color: var(--color-black);
    --color-background-button-nav-mobile: var(--color-black);
  }

  .NavBarMobile .NavBarMobile__nav {
    opacity: 0;
    visibility: hidden;
    height: 0;
    overflow: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease, height 0.3s ease;
    background-color: var(--color-accent1);
    position: fixed;
    /*top: 104px;*/
    top: var(--navBarHeightMobile, 0);
    z-index: 998;
    width: 100%;
    padding: 0 24px 24px 24px;
  }

  .NavBarMobile .NavBarMobile__nav.active {
    opacity: 1;
    visibility: visible;
    /*height: calc(100svh - 104px);*/
    height: calc(100svh - var(--navBarHeightMobile, 0));
  }

  .NavBarMobile .NavBarMobile__list {
    margin: 0;
    list-style: none;
    max-height: calc(100svh - calc(var(--navBarHeightMobile)  + 24px));
    overflow-y: scroll;
  }

  .NavBarMobile .NavBar--isOpen .NavBarMobile__list {
    animation: MoveRightLeft .6s ease-in-out both;
  }

  .NavBarMobile .NavBarMobile__list-item {
    animation: fadeIn .3s ease-in-out forwards, MoveLeftRight .3s ease-in-out forwards;
    font-size: 24px;
    line-height: 48px;
  }

  .NavBarMobile .NavBarMobile__button-next-level {
    cursor: pointer;
  }

  .NavBarMobile .page-link {
    text-decoration: none;
  }

  .NavBarMobile .NavBarMobile__button-back {
    animation: fadeInOut 1s ease-in-out normal forwards;
  }

  .NavBarMobile .NavBarMobile__button-back.reverse {
    animation: fadeOutIn 1s ease-in-out normal forwards;
  }
</style>

<script src="/static/std/assets/js/web-components/HamburgerButton.js" type="module"></script>