const {createApp} = Vue
import GalleryCard from './GalleryCard.js'
import DiscountTimer from "./DiscountTimer.js";

createApp({
    delimiters: ["[[", "]]"],
    components: {
        GalleryCard,
        DiscountTimer
    },
    data() {
        return {
            stack: [],
            showSubmenu: false,
            submenuHeading: "",
            currentLevel: 1,
            currentItems: [],
            isGoingBack: false,
            navigationData: null,
            //navigationData: JSON.parse('{{ primaryNav }}').navigationData,
        }
    },
    methods: {
        handleNavBarMouseEnter() {
          console.log('mouse entered navbar');
        },
        handleNavItemHover(item) {
            if (item.hasChildren) {
                this.submenuHeading = item.navTitle;
                this.currentItems = item.childrenData || [];
                this.showSubmenu = true;
            } else {
                this.showSubmenu = false;
            }
        },
        handleNavContainerHover() {
            this.showSubmenu = true;
        },
        handleNavContainerLeave() {
            console.log('leaving something');
            this.showSubmenu = false;
        },
        navigateToNextLevel(item) {
            this.currentLevel += 1;
            this.stack.push(this.currentItems);
            /*this.currentItems = item.subItems || [item];*/
            this.currentItems = item.childrenData || [item];
        },
        goBack() {
            if (this.currentLevel > 1) {
                this.currentLevel -= 1;
                this.currentItems = this.stack.pop() || [];
            }
        },
    },
    created() {
    },
    mounted() {
        // Access the element with the ID 'NavBar' and retrieve the 'data-primary-nav' attribute
        const primaryNavAttribute = document.getElementById('NavBar').getAttribute('data-primary-nav');

        // Set the navigationData property based on the retrieved attribute
        this.navigationData = JSON.parse(primaryNavAttribute).navigationData;

        // Calculate the height of the NavBar
        const navBarHeight = this.$refs.navBar.clientHeight;

        // Set padding-top for the body element
            // only if page has no hero
        const hasHeroAttribute = document.getElementById('masthead-desktop').getAttribute('data-has-hero');
        if (!hasHeroAttribute) {
            document.body.style.paddingTop = `${navBarHeight}px`;
        }


        // Log the calculated height for verification
        // console.log('NavBar height:', navBarHeight);

        // Set initial state on mount
        // this.currentItems = this.categoryImages;
    },
}).mount('#NavBar')