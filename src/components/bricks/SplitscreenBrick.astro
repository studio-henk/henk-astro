---
interface Props {
  order?: "reverse" | undefined;
  mediaSrc: string;
  mediaUrl?: string;
  isVideo?: boolean;
  alt?: string;
  title: string;
  subtitle?: string;
  buttonText?: string;
  buttonUrl?: string;
  url?: string;
  hasSlotContent?: boolean;
}

const {
  order,
  mediaSrc,
  mediaUrl,
  isVideo = false,
  alt = "",
  title = "Title here!",
  subtitle,
  url,
  buttonText = "Button text",
  buttonUrl,
  hasSlotContent,
} = Astro.props;
---

<section class="SplitscreenBrick" data-order={order}>
  <div class="SplitscreenBrick__grid">
    <div class="SplitscreenBrick__grid-item">
      <a class="SplitscreenBrick__link" href={mediaUrl}>
        {
          isVideo ? (
            <video
              muted=""
              loop=""
              playsinline=""
              autoplay=""
              class="SplitscreenBrick__video"
            >
              <source src={mediaSrc} type="video/mp4" />
              Sorry, your browser doesn't support embedded videos.
            </video>
          ) : (
            <img src={mediaSrc} alt={alt} class="SplitscreenBrick__img" />
          )
        }
      </a>
    </div>
    <div class="SplitscreenBrick__grid-item">
      <div class="SplitscreenBrick__content">
        <h2 class="SplitscreenBrick__title">
          {title}
        </h2>
        <h3 class="SplitscreenBrick__subtitle fs-medium">
          {subtitle}
        </h3>
        {
          hasSlotContent && (
            <div class="SplitscreenBrick__text">
              <slot />
            </div>
          )
        }
        <a href={buttonUrl} class="sh-atom-button" data-style="filled">
          {buttonText}
        </a>
      </div>
    </div>
  </div>
</section>
<style is:global>
  .SplitscreenBrick {
    padding: 24px 24px 48px 24px;
    background-color: var(--color-background-primary, #fff);
  }

  .SplitscreenBrick__grid {
    display: flex;
    flex-direction: column;
    column-gap: 0;
    max-width: none;
    row-gap: 1.5rem;
  }

  .SplitscreenBrick .SplitscreenBrick__video {
    object-fit: cover;
    width: 100%;
  }

  @media only screen and (max-width: 767px) {
    .SplitscreenBrick .SplitscreenBrick__video {
      aspect-ratio: 2/3;
      height: auto;
    }
  }

  @media only screen and (min-width: 768px) {
    .SplitscreenBrick .SplitscreenBrick__video {
      height: 100svh;
    }
  }

  .SplitscreenBrick__img {
    height: auto;
  }

  .SplitscreenBrick__content {
    max-width: 38em;
    text-wrap: balance;
    display: grid;
    gap: 24px;
    justify-content: start;
    justify-items: start;
    align-items: start;
  }

  .SplitscreenBrick__title {
    margin: 0;
  }

  .SplitscreenBrick__subtitle {
    margin: 0;
    grid-row: 1;
    font-weight: normal;
  }

  .SplitscreenBrick__text > *:first-child {
    margin-top: 0;
  }

  .SplitscreenBrick__text > *:last-child {
    margin-bottom: 0;
  }

  @media only screen and (min-width: 1024px) {
    .SplitscreenBrick {
      padding: 0;
    }

    .SplitscreenBrick__grid {
      flex-direction: row;
      align-items: center;
    }

    .SplitscreenBrick__grid-item {
      flex: 1 1 50%;
    }

    .SplitscreenBrick[data-order="reverse"] .SplitscreenBrick__grid {
      flex-direction: row-reverse;
    }

    .SplitscreenBrick .SplitscreenBrick__content {
      padding: 0 24px;
      text-align: center;
      align-items: center;
      justify-content: center;
      justify-items: center;
      margin: 0 auto;
    }

    .SplitscreenBrick__title,
    .SplitscreenBrick__subtitle {
      text-align: center;
    }
  }
</style>
